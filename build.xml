<?xml version="1.0"?>
<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<project name="BV 2.0 TCK Glassfish Porting" default="dist" basedir=".">

	<property environment="env" />
	<property file="${basedir}/build.properties" />

	<property name="maven.executable" value="${env.MAVEN_HOME}/bin/mvn" />
        <property name="pathsep" value="${path.separator}"/>
        <property name="tck.version" value="2.0.0"/>
	<property name="src" value="${basedir}/src" />
	<property name="classes" value="${basedir}/classes" />
	<property name="dist" value="${basedir}/dist" />
	<property name="lib" value="${basedir}/lib" />
	<property name="dist.file" value="bv-tck-glassfish-porting" />
        <property name="admin.port" value="4848"/>
        <property name="admin.host" value="localhost"/>
        <!-- number of seconds to wait for the v4 admin port to be available -->
	<property name="wait.for.v4" value="90"/> 
        
        <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${lib}/ant-contrib.jar" />
        
        <!-- Set the sig file to use based on the Java SE Version in use -->
	<if>
                <equals arg1="${java.specification.version}" arg2="1.7"/>
                <then>
                        <property name="sig.file" value="${porting.home}/validation-api-java7.sig" />
                </then>
                <else>
                    <property name="sig.file" value="${porting.home}/validation-api-java8.sig" />
                </else>
        </if>
        
        <condition property="java.classes.for.sig.ext" value="bundle/Classes/classes.jar"
                                   else="lib/rt.jar">    
            <and> 
                <os family="mac"/> 
                <or>
                    <contains string="${java.version}" substring="1.6" casesensitive="false" />
                    <contains string="${java.version}" substring="1.5" casesensitive="false" />
                    <contains string="${java.version}" substring="1.4" casesensitive="false" />
                </or> 
            </and>     
        </condition>

        <condition property="max.classes.restart" value="10"
                                   else="80">    
            <or>
                <os family="windows"/>
                <os family="dos"/>
            </or>     
        </condition>
        
        <condition property="aix.jars" value="${pathsep}${java.home}/lib/annotation.jar${pathsep}${java.home}/lib/vm.jar"
                                       else="">
            <and>
                <available file="${java.home}/lib/annotation.jar"/>
                <available file="${java.home}/lib/vm.jar"/>
            </and>
        </condition>

        <!-- number of seconds to wait for the v4 admin port to be available -->
        <property name="wait.for.v4" value="90"/>
        
        <!-- Get Glassfish install dir base (minus the glassfish dir) -->
        <propertyregex property="glassfish.home.base"
                       input="${glassfish.home}"
                       regexp="(.*)[\/|\\]glassfish"
                       select="\1"
                       defaultValue="${glassfish.home}"/>
        
	<target name="run.all.tests" depends="sigtest, test"/>

        <target name="test" depends="config.v4, copy.settingsxml, filter.arquillian.xml">
            <if>
                <or>
                 <os family="windows"/>
                 <os family="dos"/>
                </or>
                <then>
                    <mvn.test.win dir="glassfish-tck-runner"/>
                </then>
                <else>
                    <mvn.test dir="glassfish-tck-runner"/>
                </else>
            </if>
            
            <antcall target="stop.javadb" />                    
	</target>

	<target name="sigtest">
		<echo message="Java Specification Version in use:  ${java.specification.version}"/>
                
                <java outputproperty="sigoutput" fork="true" jar="${lib}/sigtest.jar">
			<arg value="Signaturetest"/>
                        <arg value="-Classpath"/>
                        <arg value="${java.home}/${java.classes.for.sig.ext}${pathsep}${glassfish.home}/modules/bean-validator.jar${aix.jars}"/>
                        <arg value="-Package"/>
                        <arg value="javax.validation"/>
                        <arg value="-FileName"/>
                        <arg value="${sig.file}"/>
                        <arg value="-Static"/>
		</java>
                <mkdir dir="${report.dir}"/>
                <echo message="${sigoutput}"/>
                <echo message="${sigoutput}" file="${report.dir}/bv_sig_test_results.txt"/>
                <echo message="Output is also saved to ${report.dir}/bv_sig_test_results.txt"/>
	</target>

        <target name="copy.settingsxml">
            <copy file="${porting.home}/settings.xml" todir="${user.home}/.m2"
                  flatten="true" overwrite="true">
            </copy>
	</target>
        
        <target name="filter.arquillian.xml">
            <delete file="${porting.home}/glassfish-tck-runner/src/test/resources/arquillian.xml"/>
            <copy file="${porting.home}/glassfish-tck-runner/src/test/resources/arquillian.template.xml"
                  tofile="${porting.home}/glassfish-tck-runner/src/test/resources/arquillian.xml">
                <filterset>
                  <filter token="maxClassesRestart" value="${max.classes.restart}"/>
                  <filter token="glassFishHome" value="${glassfish.home.base}"/>
                  <filter token="adminHost" value="${admin.host}"/>
                  <filter token="adminPort" value="${admin.port}"/>
                  <filter token="adminUser" value="${admin.user}"/>
                  <filter token="adminPassword" value="${admin.password}"/>
                </filterset>
            </copy>
	</target>
    
	<target name="prepare">
		<tstamp />
		<mkdir dir="${classes}" />
		<mkdir dir="${dist}" />
	</target>

	<target name="dist">
		
            <delete file="${porting.home}/glassfish-tck-runner/src/test/resources/arquillian.xml"/>
            <if>
                <available file="${basedir}/build.properties.sani"/>
                <then>
                        <property name="prop.file" value="build.properties.sani" />
                </then>
                <else>
                        <property name="prop.file" value="build.properties" />
                </else>
            </if>

            <tstamp>
                    <format property="time.stamp.bundle.string" pattern="dd-MMM-yyyy" locale="en" />
            </tstamp>
            <zip destfile="${dist}/${dist.file}-${tck.version}_${time.stamp.bundle.string}.zip">
                    <zipfileset dir="${basedir}" includes="*.xml, build.properties, classes/**,
                        lib/*.jar, glassfish-tck-runner/**, readme.txt, *.sig, password.template"
                        excludes="lib/sigtestdev.jar, glassfish-tck-runner/target/**" prefix="bv-tck-glassfish-porting" />
                    <zipfileset dir="${basedir}" includes="${prop.file}" fullpath="bv-tck-glassfish-porting/build.properties" />
            </zip>

            <delete file="${basedir}/build.properties.sani" quiet="true" />
	</target>

	<target name="dist.sani">
		<edit.prop.file />
		<antcall target="dist" />
	</target>

	<macrodef name="edit.prop.file">
		<sequential>
			<loadfile srcfile="${basedir}/build.properties" property="props" />

			<propertyregex property="porting.home.prop"
                            input="${props}"
                            regexp="(porting.home=)(.*)"
                            replace="\1"
                            defaultvalue="${props}"
                            override="true"/>

			<propertyregex property="glassfish.home.prop"
	                 input="${porting.home.prop}"
	                 regexp="(glassfish.home=)(.*)"
	                 replace="\1"
	                 defaultvalue="${porting.home.prop}"
	                 override="true"/>

			<echo message="${glassfish.home.prop}"
                          file="${basedir}/build.properties.sani"/>

		</sequential>
	</macrodef>


	<!-- Targets used to config V4 to run the BV TCK -->

	<!--
       Attempt to stop the domain, if it is running, using the stopserv script.  Note,
       using asadmin stop-domain from within ant currently does not work.  It assumes the
       domain lives in /var/appserver/domains and there does not seem to be a way to fix
       this.  All attempts at using the domaindir option failed.  This may be a bug in
       asamdin or an antism since asadmin stop-domain works fine on the command line.
  -->
	<presetdef name="stop.domain">
		<if>
			<os family="unix" />
			<then>
				<exec dir="${glassfish.home}/bin" executable="${glassfish.home}/bin/stopserv">
					<env key="PATH" path="${java.home}/bin:${env.PATH}" />
				</exec>
				<sleep seconds="2" />
			</then>
			<elseif>
				<or>
					<os family="windows" />
					<os family="dos" />
				</or>
				<then>
					<exec dir="${glassfish.home}/bin"
						executable="${glassfish.home}/bin/stopserv.bat">
						<env key="PATH" path="${java.home}/bin:${env.PATH}" />
					</exec>
					<sleep seconds="2" />
				</then>
			</elseif>
			<else>
				<!-- should not happen -->
				<echo>ERROR, Neither Winows nor Unix</echo>
			</else>
		</if>
	</presetdef>

	<presetdef name="start.domain">
		<if>
			<os family="unix" />
			<then>
				<exec dir="${glassfish.home}/bin" executable="${glassfish.home}/bin/startserv"
					spawn="true">
					<env key="PATH" path="${java.home}/bin:${env.PATH}" />
				</exec>
				<sleep seconds="2" />
			</then>
			<elseif>
				<or>
					<os family="windows" />
					<os family="dos" />
				</or>
				<then>
					<exec dir="${glassfish.home}/bin"
						executable="${glassfish.home}/bin/startserv.bat"
						spawn="true">
						<env key="PATH" path="${java.home}/bin:${env.PATH}" />
					</exec>
					<sleep seconds="2" />
				</then>
			</elseif>
			<else>
				<!-- should not happen -->
				<echo>ERROR, Neither Winows nor Unix</echo>
			</else>
		</if>
	</presetdef>

	<macrodef name="edit.domain.xml">
		<sequential>
			<property name="domain.file" value="${glassfish.home}/domains/domain1/config/domain.xml" />
                            
                            <!--<loadfile property="domain.file.contents.das" srcfile="${domain.file}" />
                            <propertyregex property="domain.file.contents.das.found"
                                    input="${domain.file.contents.das}"
                                    regexp="&lt;das-config&gt;&lt;/das-config&gt;"
                                    replace="&lt;das-config deploy-xml-validation=&quot;none&quot;&gt;&lt;/das-config&gt;"
                                    defaultvalue="${domain.file.contents.das}" override="true"/>
                            <echo message="${domain.file.contents.das.found}" file="${domain.file}" />
                            <echo>${domain.file} written to disk.</echo>
                        -->
                        <copy file="${domain.file}" tofile="${domain.file}.original" failonerror="false" />
			<loadfile property="domain.file.contents" srcfile="${domain.file}" />
			<propertyregex property="heap.found" input="${domain.file.contents}"
				regexp="&lt;jvm-options>-Xmx(.*)&lt;/jvm-options>"
				replace="&lt;jvm-options>-Xmx${max.heap.size}&lt;/jvm-options>"
				defaultvalue="true" />
			<if>
				<istrue value="${heap.found}" />
				<then>
					<echo>Max heap VM option not found in java-config.</echo>
				</then>
				<else>
					<echo>Setting max heap value to ${max.heap.size}</echo>
					<echo message="${heap.found}" file="${domain.file}" />
					<echo>${domain.file} written to disk.</echo>
				</else>
			</if>

			<loadfile property="domain.file.contents2" srcfile="${domain.file}" />
			<propertyregex property="perm.gen.found" input="${domain.file.contents2}"
				regexp="&lt;jvm-options>-XX:MaxPermSize=(.*)&lt;/jvm-options>"
				replace="&lt;jvm-options>-XX:MaxPermSize=${max.perm.gen.size}&lt;/jvm-options>"
				defaultvalue="true" />
			<if>
				<istrue value="${perm.gen.found}" />
				<then>
					<echo>Max permgen VM option not found in java-config.</echo>
				</then>
				<else>
					<echo>Setting max permgen value to ${max.perm.gen.size}</echo>
					<echo message="${perm.gen.found}" file="${domain.file}" />
					<echo>${domain.file} written to disk.</echo>
				</else>
			</if>

                        
                        
			<loadfile property="domain.file.contents3" srcfile="${domain.file}" />
			<propertyregex property="ea.set" input="${domain.file.contents3}"
				regexp="&lt;jvm-options>-ea&lt;/jvm-options>"
				select="true" defaultvalue="false" />
			<if>
				<isfalse value="${ea.set}" />
				<then>
					<propertyregex property="java.config" input="${domain.file.contents3}"
						regexp="(&lt;/java-config>)"
						replace="&lt;jvm-options>-ea&lt;/jvm-options>\1"
						defaultvalue="true" />
					<if>
						<istrue value="${java.config}" />
						<then>
							<echo>java-config NOT found, something bad happened.</echo>
						</then>
						<else>
							<echo>Adding -ea VM option to java-config.</echo>
							<echo message="${java.config}" file="${domain.file}" />
							<echo>${domain.file} written to disk.</echo>
						</else>
					</if>
				</then>
				<else>
					<echo>-ea VM option already set in java-config, so not setting.</echo>
				</else>
			</if>

			<loadfile property="domain.file.contents4" srcfile="${domain.file}" />
			<propertyregex property="provider.set" input="${domain.file.contents4}"
                regexp="&lt;jvm-options>-Dvalidation.provider=(.*)&lt;/jvm-options>"
                select="true"
            	defaultvalue="false" />
			<if>
				<isfalse value="${provider.set}" />
				<then>
					<propertyregex property="java.config2" input="${domain.file.contents4}"
                        regexp="(&lt;/java-config>)"
                        replace="&lt;jvm-options>-Dvalidation.provider=${validation.provider}&lt;/jvm-options>\1"
                        defaultvalue="true" />
					<if>
						<istrue value="${java.config2}" />
						<then>
							<echo>java-config NOT found, something bad happened.</echo>
						</then>
						<else>
							<echo>Adding -Dvalidation.provider=${validation.provider} to java-config.</echo>
							<echo message="${java.config2}" file="${domain.file}" />
							<echo>${domain.file} written to disk.</echo>
						</else>
					</if>
				</then>
				<else>
					<propertyregex property="java.config2" input="${domain.file.contents4}"
                        regexp="&lt;jvm-options>-Dvalidation.provider=(.*)&lt;/jvm-options>"
                        replace="&lt;jvm-options>-Dvalidation.provider=${validation.provider}&lt;/jvm-options>"
                        defaultvalue="true" />
					<if>
						<istrue value="${java.config2}" />
						<then>
							<echo>java-config NOT found, something bad happened.</echo>
						</then>
						<else>
							<echo>validation.provider already in java-config, value set to ${validation.provider}.</echo>
							<echo message="${java.config2}" file="${domain.file}" />
							<echo>${domain.file} written to disk.</echo>
						</else>
					</if>
				</else>
			</if>
		</sequential>
	</macrodef>

	<target name="stop.v4.domain">
		<stop.domain />
	</target>
	
	<target name="restart.v4.domain">
            <echo message="Restarting the Glassfish domain"/>
            <stop.domain />
            <start.domain />
            <waitfor maxwait="${wait.for.v4}" maxwaitunit="second" checkevery="1" checkeveryunit="second">
              <socket server="${admin.host}" port="${admin.port}"/>
            </waitfor>
            <echo>Domain started.</echo>
	</target>

        <target name="start.javadb">
            <echo message="*** Starting JavaDB "/>
            <java classname="org.apache.derby.drda.NetworkServerControl"
                 classpath="${javadb.home}/lib/derby.jar${pathsep}${javadb.home}/lib/derbynet.jar${pathsep}${javadb.home}/lib/derbytools.jar${pathsep}${javadb.home}/lib/derbyclient.jar" fork="true" spawn="true">
                <sysproperty key="derby.system.home" value="${javadb.home}/databases"/>
                <arg line="-h ${javadb.host} -p ${javadb.port} start"/>
            </java>
            <sleep seconds="4"/>
            <echo message="*** JavaDB Started "/>
        </target>

        <target name="stop.javadb">
            <java classname="org.apache.derby.drda.NetworkServerControl"
             classpath="${javadb.home}/lib/derby.jar${pathsep}${javadb.home}/lib/derbynet.jar${pathsep}${javadb.home}/lib/derbytools.jar${pathsep}${javadb.home}/lib/derbyclient.jar" fork="true" spawn="true">
             <arg line="-h ${javadb.host} -p ${javadb.port} shutdown"/>
            </java>
            <echo message="*** JavaDB Stopped "/>
        </target>

        <target name="clean">
           <delete dir="${porting.home}/glassfish-tck-runner/target" quiet="true" />
           <echo message="*** Deleted ${porting.home}/glassfish-tck-runner/target"/>
           <delete dir="${porting.home}/reports" quiet="true" />
           <echo message="*** Deleted ${porting.home}/reports"/>
        </target>
     
        <target name="config.v4">
		<stop.domain />
		<antcall target="clean" />
                <edit.domain.xml />
		<start.domain />
		<echo>Checking for a socket on ${admin.host} at port ${admin.port}, will wait up to ${wait.for.v4} seconds</echo>
		<waitfor maxwait="${wait.for.v4}" maxwaitunit="second" checkevery="1" checkeveryunit="second">
		  <socket server="${admin.host}" port="${admin.port}"/>
		</waitfor>
		<echo>Domain started.</echo>
                <antcall target="stop.javadb" />
                <antcall target="start.javadb" />
                <stop.domain/>
	</target>
        
	<presetdef name="mvn.test">
		<exec executable="${maven.executable}">
			<arg value="-U" />
                        <arg value="clean" />
                        <arg value="test" />
		</exec>
	</presetdef>
        
        <presetdef name="mvn.test.win">
		<exec executable="cmd">
			<arg value="/c"/>
                        <arg value="${maven.executable}.bat"/>
                        <arg value="-U" />
                        <arg value="test" />
		</exec>
	</presetdef>
        
        <!--<target name="-record.sigtest">
		<java fork="true" jar="${lib}/sigtestdev.jar">
			<arg value="Setup"/>
                        <arg value="-Classpath"/>
                        <arg value="${java.home}/${java.classes.for.sig.ext}:${glassfish.home}/modules/bean-validator.jar"/>
                        <arg value="-Package"/>
                        <arg value="javax.validation"/>
                        <arg value="-FileName"/>
                        <arg value="${porting.home}/validation-api-java7.sig"/>
                        <arg value="-Static"/>
		</java>
	</target>
        -->

</project>
